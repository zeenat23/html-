 JAVASCRIPT:

It is often used when inserting an expression in a web page might produce some unwanted effect. To remove this effect, “javascript:void(0)” is used.
 This expression returns undefined primitive value.

truncate - delete the unique id as well
delete - doesnt delete the unique id 

CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   );

nvarchar will accept everything number alphabet everything.

sql operator 
 SELECT 30 + 20(we use select attribute )// arithmetic opearators

logical operator 
AND ANY OR IN NOT IN LIKE ALL EXISTS BETWEEN


STORED PROCEDURE 
A stored procedure is a prepared SQL code that you can save, 
so the code can be reused over and over again.
CREATE PROCEDURE procedure_name
AS
sql_statement
GO;


join - combine rows from two or more tables.
innerjoin - combines matching values in both the tables 
The LEFT JOIN keyword returns all records from the left table (table1), 
and the matching records from the right table (table2).

The RIGHT JOIN keyword returns all records from the right table (table2), 
and the matching records from the left table (table1).




JAVASCRIPT 
promises - something we commit to the program , either promise get resolved , rejected or pending

<!DOCTYPE html>  
<html lang="en">  
<head>  
<body>  
    <script>  
   const myPromise = new Promise((resolve, reject) => {    
    let condition=9;    
      
    if(condition<0) {      
        resolve('Promise is resolved successfully and then() menthod will be called');    
    } else {      
        reject('Promise is rejected and catch() medhod will be called');    
    }  
});  
    
  myPromise.then((message) => {   
    console.log(message);  
}).catch((message) => {   
    console.log(message);  
});  
    </script>  
</body>  
</html>  

HOISTING-----
**Hoisting is a kind of default behavior in which all the declarations either variable declaration or 
function declaration are moved at the top of the scope just before executing the program's code. 


Next →← Prev
How to add a class to an element using JavaScript----

<div id = "div1" class = "oldClass"> </div>  
a=document.getElementById("div1").className = " newClass"; 
a.className = "newClass"


js datatypes ----
string
number
boolean
undefined
arrays 
onjects 
null


objects are name value pair 
person['name'] pr person.nAme

events-
onchange	An HTML element has been changed
onclick	        The user clicks an HTML element
onmouseover	The user moves the mouse over an HTML element
onmouseout	The user moves the mouse away from an HTML element
onkeydown	The user pushes a keyboard key
onload	        The browser has finished loading the page 

JS STRING METHODS--
String Methods
Method	Description
charAt()	Returns the character at the specified index (position)
charCodeAt()	Returns the Unicode of the character at the specified index
concat()	Joins two or more strings, and returns a new joined strings
endsWith()	Checks whether a string ends with specified string/characters
fromCharCode()	Converts Unicode values to characters
includes()	Checks whether a string contains the specified string/characters
indexOf()	Returns the position of the first found occurrence of a specified value in a string
lastIndexOf()	Returns the position of the last found occurrence of a specified value in a string
localeCompare()	Compares two strings in the current locale
match()	         Searches a string for a match against a regular expression, and returns the matches
repeat()	Returns a new string with a specified number of copies of an existing string
replace()	Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced
search()	Searches a string for a specified value, or regular expression, and returns the position of the match
slice()   	Extracts a part of a string and returns a new string
split()	        Splits a string into an array of substrings
startsWith()	Checks whether a string begins with specified characters
substr()	Extracts the characters from a string, beginning at a specified start position, and through the specified number of character
substring()	Extracts the characters from a string, between two specified indices
toLocaleLowerCase()	Converts a string to lowercase letters, according to the host's locale
toLocaleUpperCase()	Converts a string to uppercase letters, according to the host's locale
toLowerCase()	Converts a string to lowercase letters
toString()	Returns the value of a String object
toUpperCase()	Converts a string to uppercase letters
trim()	        Removes whitespace from both ends of a string
valueOf()	Returns the primitive value of a String object


Number Properties-----

Property	Description
constructor	Returns the function that created JavaScript's Number prototype
MAX_VALUE	Returns the largest number possible in JavaScript
MIN_VALUE	Returns the smallest number possible in JavaScript
NEGATIVE_INFINITY	Represents negative infinity (returned on overflow)
NaN	Represents a "Not-a-Number" value
POSITIVE_INFINITY	Represents infinity (returned on overflow)
prototype	Allows you to add properties and methods to an object


Number Methods
Method	Description
isFinite()	Checks whether a value is a finite number
isInteger()	Checks whether a value is an integer
isNaN()	Checks whether a value is Number.NaN
isSafeInteger()	Checks whether a value is a safe integer
toExponential(x)	Converts a number into an exponential notation
toFixed(x)	       Formats a number with x numbers of digits after the decimal point
toLocaleString()	Converts a number into a string, based on the locale settings
toPrecision(x)	Formats a number to x length
toString()	Converts a number to a string
valueOf()	Returns the primitive value of a number


Array Methods
Method	Description
concat()	Joins two or more arrays, and returns a copy of the joined arrays
copyWithin()	Copies array elements within the array, to and from specified positions
entries()	Returns a key/value pair Array Iteration Object
every() 	Checks if every element in an array pass a test
fill()	        Fill the elements in an array with a static value
filter()	Creates a new array with every element in an array that pass a test
find()	        Returns the value of the first element in an array that pass a test
findIndex()	Returns the index of the first element in an array that pass a test
forEach()	Calls a function for each array element
from()	        Creates an array from an object
includes()	Check if an array contains the specified element
indexOf()	Search the array for an element and returns its position
isArray()	Checks whether an object is an array
join()	        Joins all elements of an array into a string
keys()	        Returns a Array Iteration Object, containing the keys of the original array
lastIndexOf()	Search the array for an element, starting at the end, and returns its position
map()	        C reates a new array with the result of calling a function for each array element
pop()	        Removes the last element of an array, and returns that element
push()	        Adds new elements to the end of an array, and returns the new length
reduce()	Reduce the values of an array to a single value (going left-to-right)
reduceRight()	Reduce the values of an array to a single value (going right-to-left)
reverse()	Reverses the order of the elements in an array
shift()	        Removes the first element of an array, and returns that element
slice() 	Selects a part of an array, and returns the new array
some()	        Checks if any of the elements in an array pass a test
sort()	        Sorts the elements of an array
splice()	Adds/Removes elements from an array
toString()	Converts an array to a string, and returns the result
unshift()	Adds new elements to the beginning of an array, and returns the new length
valueOf()	Returns the primitive value of an array




